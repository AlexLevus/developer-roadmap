type User {
  id: ID!
  email: String!
  password: String!
  firstName: String
  lastName: String
  middleName: String
  resetPasswordToken: String
  resetPasswordExpires: Float
  createdAt: Float!
  lastLogin: Float
  isAdmin: Boolean!
  isActive: Boolean!
  isCompleted: Boolean
}

type Query {
  user(id: ID!): User
  users: [User]
}

input CreateUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  id: String!
  firstName: String!
  lastName: String!
  middleName: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

type LoginResponse {
  id: String!
  accessToken: String!
  refreshToken: String!
}

type RefreshTokenResponse {
  accessToken: String!
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): Boolean
  verifyEmail(emailToken: String!): Boolean
  login(input: LoginUserInput!): LoginResponse
  refreshToken(refreshToken: String!): RefreshTokenResponse
  changePassword(id: ID!, currentPassword: String!, password: String!): Boolean
  forgotPassword(email: String!): Boolean
  resetPassword(resetPasswordToken: String!, password: String): Boolean
}
