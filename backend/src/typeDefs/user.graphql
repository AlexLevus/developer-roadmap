type User {
  id: ID!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  resetPasswordToken: String
  resetPasswordExpires: Float
  createdAt: Float!
  lastLogin: Float
  isVerified: Boolean!
  isSuperuser: Boolean!
}

type Query {
  user(id: ID!): User
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
}

type RefreshTokenResponse {
  accessToken: String!
}

type Mutation {
  createUser(input: CreateUserInput!): User
  verifyEmail(emailToken: String!): Boolean
  login(input: LoginUserInput!): LoginResponse
  refreshToken(refreshToken: String!): RefreshTokenResponse
  changePassword(id: ID!, currentPassword: String!, password: String!): Boolean
  forgotPassword(email: String!): Boolean
  resetPassword(resetPasswordToken: String!, password: String!): Boolean
}
